(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{771:function(t,e,o){"use strict";o.r(e);var r=o(15),l=Object(r.a)({},(function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("p",[t._v("Flux v2 의 Core Concepts 및 GOTK (GitOps Toolkit) components 정리.")]),t._v(" "),o("h2",{attrs:{id:"core-concepts"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#core-concepts"}},[t._v("#")]),t._v(" Core Concepts")]),t._v(" "),o("ul",[o("li",[o("p",[t._v("Source")]),t._v(" "),o("ul",[o("li",[t._v("Flux 의 source 는 repository 의 상태를 지속적으로 확인하기 위해 정의할 수 있는, Flux 의 구성 resource 를 의미한다.")]),t._v(" "),o("li",[t._v("정의된 interval 간격으로 변경 사항이 있는지 확인하고, 새로운 version 이 확인되면 Flux component 가 실행할 수 있는 artifact 를 cluster 에 내부적으로 생성한다.")]),t._v(" "),o("li",[t._v("Kubernetes custom resource 로 생성하며, 아래와 같은 resource 를 정의할 수 있다.\n"),o("ul",[o("li",[t._v("GitRepository, HelmRepository, Bucket (Object Storage).")])])])])]),t._v(" "),o("li",[o("p",[t._v("reconciliation")]),t._v(" "),o("ul",[o("li",[t._v("Flux 의 reconciliation 은 Flux source 가 정의한 resource 가 생성한 artifact 의 상태와, 현재 실행 중인 상태 (k8s cluster, infra) 가 일치하는지 확인하는 것을 의미한다.")]),t._v(" "),o("li",[t._v("위의 확인 과정에서 일치하지 않을 경우, source 의 유형에 맞는 작업을 수행하도록 정의할 수 있다.\n"),o("ul",[o("li",[t._v("Kustomization, HelmRelease, Bucket reconciliation 수행.")])])]),t._v(" "),o("li",[t._v("특히, Kustomization 의 경우, kustomization.kustomize.toolkit.fluxcd.io 의 custom resource 이며, kustomize 릍 통한 k8s object 배포를 위해 정의할 수 있으며, repository 에 kustomization.yml 이 없더라도 내부적으로는 kustomize 를 통하여 모든 k8s object 를 배포한다."),o("br"),t._v(" "),o("a",{attrs:{href:"https://fluxcd.io/docs/faq/#kustomize-questions",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://fluxcd.io/docs/faq/#kustomize-questions"),o("OutboundLink")],1)])])]),t._v(" "),o("li",[o("p",[t._v("Bootstrap")]),t._v(" "),o("ul",[o("li",[t._v("FluxCD 의 구성 component 들을 k8s 에 설치하는 방식 또한, GitOps 방식으로 프로세스를 실행하게 되는데, 이를 bootstrap 이라 한다.")]),t._v(" "),o("li",[t._v("FluxCD 의 GitHub main 저장소에 있는 manifest file 을 내려 받아, 사용자의 cluster 에 source repository 에 저장하고, flux 구성 요소의 설정 변경 및 재배포를 Flux reconciliation 을 통하여 수행한다.")]),t._v(" "),o("li",[t._v("아래 tool 을 설치하여, Flux bootstrap 을 실행할 수 있다.\n"),o("ul",[o("li",[o("b",[t._v("Flux CLI")]),t._v(" or Terraform Provider")])])])])])]),t._v(" "),o("h2",{attrs:{id:"gotk-components"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#gotk-components"}},[t._v("#")]),t._v(" GOTK Components")]),t._v(" "),o("p",[t._v("GitOps Toolkit 은 Flux v2의 런타임을 구성하는 API 및 Controller Set 이다."),o("br"),t._v("\nAPI는 Kubernetes custom resource 로 구성되며, custom resource 정의 를 직접 수정하여 cluster 에 배포할 수도 있다.")]),t._v(" "),o("ul",[o("li",[o("b",[t._v("Source Controller")]),t._v(" "),o("ul",[o("li",[t._v("GitRepository CRD")]),t._v(" "),o("li",[t._v("HelmRepository CRD")]),t._v(" "),o("li",[t._v("HelmChart CRD")]),t._v(" "),o("li",[t._v("Bucket CRD")])])]),t._v(" "),o("li",[o("b",[t._v("Kustomize Controller")]),t._v(" "),o("ul",[o("li",[t._v("Kustomization CRD")])])]),t._v(" "),o("li",[t._v("Helm Controller\n"),o("ul",[o("li",[t._v("HelmRelease CRD")])])]),t._v(" "),o("li",[t._v("Notification Controller\n"),o("ul",[o("li",[t._v("Provider CRD")]),t._v(" "),o("li",[t._v("Alert CRD")]),t._v(" "),o("li",[t._v("Receiver CRD")])])]),t._v(" "),o("li",[o("b",[t._v("Image reflector & automation controller")]),t._v(" "),o("ul",[o("li",[t._v("ImageRepository CRD")]),t._v(" "),o("li",[t._v("ImagePolicy CRD")]),t._v(" "),o("li",[t._v("ImageUpdateAutomation CRD")])])])]),t._v(" "),o("p",[t._v("FluxCD 에서 제공하는 모든 controller 를 모두 배포하면, 위 목록의 6개의 deployment 가 배포되고, 관련 CRD 가 cluster 에 정의된다."),o("br"),t._v("\n아래, controller set 중에서, source 관련 custrom resource 의 artifact 생성을 하는 역할을 "),o("b",[t._v("Source Controller")]),t._v(" 가 수행하며, reconciliation 의 역할을 수행하는 것이, "),o("b",[t._v("Kustomize Controller")]),t._v(", Helm Controller 이다.")]),t._v(" "),o("hr"),t._v(" "),o("p",[t._v("| "),o("small",[t._v("정확히 확인하지는 않았지만,,, git repository 의 k8s 관련 yml 정의와, helm release automation 을 수행하는, 즉, kustomize / helm 의 reconciliation 을 담당하는 controller 는 각각 따로 있지만, Object Storage 의 reconciliation 을 담당하는 controller 는 따로 없다.")]),o("br"),t._v(" "),o("small",[t._v("Object Storage 의 경우에는, artifact revision 재생성하는 작업 이후에, 배포 과정이 따로 필요하지 않으므로, Bucket custom resource 정의만으로 source resource 관리 및 reconciliation 을 모두 수행할 것이다.")])]),t._v(" "),o("hr"),t._v(" "),o("p",[t._v("그 외, Notification Controller 는 정의된 Alert custom resource 를 통하여 3rd. party 연계 등을 위한 부가적인 기능을 제공한다.")]),t._v(" "),o("p",[o("b",[t._v("Image reflector & automation controller")]),t._v(" 는 하나의 set 이며, container image 의 push 이력 및 tag 적용 policy 등을 관리하고, 실제로 deploy automation 까지 수행한다.")]),t._v(" "),o("h4",{attrs:{id:"source-controller-kustomize-controller-image-reflector-automation-controller-에-대한-좀-더-자세한-정리-내역이다"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#source-controller-kustomize-controller-image-reflector-automation-controller-에-대한-좀-더-자세한-정리-내역이다"}},[t._v("#")]),t._v(" "),o("u",[o("em",[t._v("Source controller, Kustomize controller, Image reflector & automation controller")])]),t._v(" 에 대한 좀 더 자세한 정리 내역이다.")]),t._v(" "),o("h3",{attrs:{id:"source-controller"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#source-controller"}},[t._v("#")]),t._v(" Source Controller")]),t._v(" "),o("p",[t._v("Source Controller 는 deployment 로 배포되며, 아래와 같이 cluster 에 사용자가 정의한 source custom resource 를 API 를 통해 감지하여, 변경 사항이 있으면 Artifact 를 Local 에 생성한다.")]),t._v(" "),o("img",{attrs:{src:"https://fluxcd.io/img/source-controller.png"}}),t._v(" "),o("ul",[o("li",[t._v("Features\n"),o("ul",[o("li",[t._v("source custom resource 정의 validation check")]),t._v(" "),o("li",[t._v("source (SSH, user/password, API token) 인증")]),t._v(" "),o("li",[t._v("소스 신뢰성 검증 (PGP),")]),t._v(" "),o("li",[t._v("업데이트 정책 (semver) 기반, 소스 변경 감지")]),t._v(" "),o("li",[t._v("온 디맨드 및 일정에 따라 source resource fetch")]),t._v(" "),o("li",[t._v("소스 변경 및 상태 변경에 대한 notification\n"),o("ul",[o("li",[t._v("notification-controller 에 알려, 3rd. party 연계 가능.")])])]),t._v(" "),o("li",[t._v("resource 를 tar.gz > yaml 형태로 packaging 하여 local 에 저장\n"),o("ul",[o("li",[t._v("아래와 같이 artifact 를 물리적인 파일로 생성.")])])])])])]),t._v(" "),o("div",{staticClass:"language-sh line-numbers-mode"},[o("pre",{pre:!0,attrs:{class:"language-sh"}},[o("code",[t._v("$ "),o("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" -tlra /data/gitrepository/flux-system/flux-system/\n\nlrwxrwxrwx    "),o("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" controll "),o("span",{pre:!0,attrs:{class:"token number"}},[t._v("1337")]),t._v("            "),o("span",{pre:!0,attrs:{class:"token number"}},[t._v("91")]),t._v(" Jun  "),o("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" 08:53 latest.tar.gz -"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" /data/gitrepository/flux-system/flux-system/20ebd9bf70ecc2a061cf2ed0cdff9fd7bc3ab28b.tar.gz\n-rw-r--r--    "),o("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" controll "),o("span",{pre:!0,attrs:{class:"token number"}},[t._v("1337")]),t._v("         "),o("span",{pre:!0,attrs:{class:"token number"}},[t._v("26665")]),t._v(" Jun  "),o("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" 08:53 20ebd9bf70ecc2a061cf2ed0cdff9fd7bc3ab28b.tar.gz\n")])]),t._v(" "),o("div",{staticClass:"line-numbers-wrapper"},[o("span",{staticClass:"line-number"},[t._v("1")]),o("br"),o("span",{staticClass:"line-number"},[t._v("2")]),o("br"),o("span",{staticClass:"line-number"},[t._v("3")]),o("br"),o("span",{staticClass:"line-number"},[t._v("4")]),o("br")])]),o("h3",{attrs:{id:"kustomize-controller"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#kustomize-controller"}},[t._v("#")]),t._v(" Kustomize Controller")]),t._v(" "),o("p",[t._v("Kustomize Controller 는 Source Controller 가 생성한 artifact 와 현재 k8s cluster 의 상태를 비교하고, k8s manifest 를 kustomize 를 사용하여 배포한다.")]),t._v(" "),o("img",{attrs:{src:"https://fluxcd.io/img/kustomize-controller.png"}}),t._v(" "),o("ul",[o("li",[t._v("Features\n"),o("ul",[o("li",[t._v("k8s cluster 의 reconciliation 을 담당하며, 여러 개의 source resource 변경 감지도 가능.")]),t._v(" "),o("li",[t._v("Kustomize 를 사용하여 배포하기 위한 manifest 를 생성.")]),t._v(" "),o("li",[t._v("Kubernetes API에 대한 manifest validation check.")]),t._v(" "),o("li",[t._v("Service Account 로 Impersonate,,? (multi-tenancy RBAC)")]),t._v(" "),o("li",[t._v("배포된 workload health check.")]),t._v(" "),o("li",[t._v("정의된 k8s manifest 의 관계에 따라, 순서에 맞게 배포.")]),t._v(" "),o("li",[t._v("source 에서 제거된 resource prune (Garbage Collection)")]),t._v(" "),o("li",[t._v("cluster 상태 변경 notification\n"),o("ul",[o("li",[t._v("notification-controller 에 알려, 3rd. party 연계 가능.")])])])])])]),t._v(" "),o("h3",{attrs:{id:"image-reflector-automation-controller"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#image-reflector-automation-controller"}},[t._v("#")]),t._v(" Image reflector & automation controller")]),t._v(" "),o("p",[t._v("image-reflector-controller와 image-automation-controller는 set 로 배포된다."),o("br"),t._v("\n새로운 Container Image 가 감지되면, Git Repository 의 manifest 에 지정된 image tag 를 업데이트 하고, 이를 통해 Kustomization 의 reconciliation 이 수행되어질 수 있도록 한다.")]),t._v(" "),o("img",{attrs:{src:"https://fluxcd.io/img/image-update-automation.png"}}),t._v(" "),o("ul",[o("li",[t._v("Features\n"),o("ul",[o("li",[t._v("image-reflector-controller 는 ImageRepository 를 scan 하고, Kubernetes resource 에 image metadata 를 반영하여, automation controller 가 실행되도록 한다.")]),t._v(" "),o("li",[t._v("image-automation-controller 는 scan 한 최신 image metadata 를 기반으로, 설정된 GitRepository 의 yaml 을 update 및 commit / push 를 수행한다.")])])])])])}),[],!1,null,null,null);e.default=l.exports}}]);